/*
 * 国土地理院測量計算API
 *
 * 国土地理院が提供する測量計算のためのREST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GsiApi.Client;
using GsiApi.Model;

namespace GsiApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISurveyCalcApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 距離と方位角の計算
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcBl2stCalcPlGet200Response</returns>
        SurveycalcBl2stCalcPlGet200Response SurveycalcBl2stCalcPlGet(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0);

        /// <summary>
        /// 距離と方位角の計算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcBl2stCalcPlGet200Response</returns>
        ApiResponse<SurveycalcBl2stCalcPlGet200Response> SurveycalcBl2stCalcPlGetWithHttpInfo(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0);
        /// <summary>
        /// 平面直角座標への換算
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcBl2xyPlGet200Response</returns>
        SurveycalcBl2xyPlGet200Response SurveycalcBl2xyPlGet(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0);

        /// <summary>
        /// 平面直角座標への換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcBl2xyPlGet200Response</returns>
        ApiResponse<SurveycalcBl2xyPlGet200Response> SurveycalcBl2xyPlGetWithHttpInfo(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0);
        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcTransPlGet200Response</returns>
        SurveycalcTransPlGet200Response SurveycalcTransPlGet(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0);

        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcTransPlGet200Response</returns>
        ApiResponse<SurveycalcTransPlGet200Response> SurveycalcTransPlGetWithHttpInfo(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0);
        /// <summary>
        /// 緯度・経度への換算
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcXy2blPlGet200Response</returns>
        SurveycalcXy2blPlGet200Response SurveycalcXy2blPlGet(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0);

        /// <summary>
        /// 緯度・経度への換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcXy2blPlGet200Response</returns>
        ApiResponse<SurveycalcXy2blPlGet200Response> SurveycalcXy2blPlGetWithHttpInfo(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0);
        /// <summary>
        /// 距離と方向角の計算
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcXy2stPlGet200Response</returns>
        SurveycalcXy2stPlGet200Response SurveycalcXy2stPlGet(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0);

        /// <summary>
        /// 距離と方向角の計算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcXy2stPlGet200Response</returns>
        ApiResponse<SurveycalcXy2stPlGet200Response> SurveycalcXy2stPlGetWithHttpInfo(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISurveyCalcApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 距離と方位角の計算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcBl2stCalcPlGet200Response</returns>
        System.Threading.Tasks.Task<SurveycalcBl2stCalcPlGet200Response> SurveycalcBl2stCalcPlGetAsync(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 距離と方位角の計算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcBl2stCalcPlGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveycalcBl2stCalcPlGet200Response>> SurveycalcBl2stCalcPlGetWithHttpInfoAsync(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 平面直角座標への換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcBl2xyPlGet200Response</returns>
        System.Threading.Tasks.Task<SurveycalcBl2xyPlGet200Response> SurveycalcBl2xyPlGetAsync(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 平面直角座標への換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcBl2xyPlGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveycalcBl2xyPlGet200Response>> SurveycalcBl2xyPlGetWithHttpInfoAsync(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcTransPlGet200Response</returns>
        System.Threading.Tasks.Task<SurveycalcTransPlGet200Response> SurveycalcTransPlGetAsync(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcTransPlGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveycalcTransPlGet200Response>> SurveycalcTransPlGetWithHttpInfoAsync(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 緯度・経度への換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcXy2blPlGet200Response</returns>
        System.Threading.Tasks.Task<SurveycalcXy2blPlGet200Response> SurveycalcXy2blPlGetAsync(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 緯度・経度への換算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcXy2blPlGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveycalcXy2blPlGet200Response>> SurveycalcXy2blPlGetWithHttpInfoAsync(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 距離と方向角の計算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcXy2stPlGet200Response</returns>
        System.Threading.Tasks.Task<SurveycalcXy2stPlGet200Response> SurveycalcXy2stPlGetAsync(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 距離と方向角の計算
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcXy2stPlGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SurveycalcXy2stPlGet200Response>> SurveycalcXy2stPlGetWithHttpInfoAsync(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISurveyCalcApi : ISurveyCalcApiSync, ISurveyCalcApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SurveyCalcApi : ISurveyCalcApi
    {
        private GsiApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyCalcApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SurveyCalcApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyCalcApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SurveyCalcApi(string basePath)
        {
            this.Configuration = GsiApi.Client.Configuration.MergeConfigurations(
                GsiApi.Client.GlobalConfiguration.Instance,
                new GsiApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GsiApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GsiApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GsiApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyCalcApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SurveyCalcApi(GsiApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GsiApi.Client.Configuration.MergeConfigurations(
                GsiApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GsiApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GsiApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GsiApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SurveyCalcApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SurveyCalcApi(GsiApi.Client.ISynchronousClient client, GsiApi.Client.IAsynchronousClient asyncClient, GsiApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GsiApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GsiApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GsiApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GsiApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GsiApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 距離と方位角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcBl2stCalcPlGet200Response</returns>
        public SurveycalcBl2stCalcPlGet200Response SurveycalcBl2stCalcPlGet(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0)
        {
            GsiApi.Client.ApiResponse<SurveycalcBl2stCalcPlGet200Response> localVarResponse = SurveycalcBl2stCalcPlGetWithHttpInfo(outputType, ellipsoid, latitude1, longitude1, latitude2, longitude2);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 距離と方位角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcBl2stCalcPlGet200Response</returns>
        public GsiApi.Client.ApiResponse<SurveycalcBl2stCalcPlGet200Response> SurveycalcBl2stCalcPlGetWithHttpInfo(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0)
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcBl2stCalcPlGet");
            }

            // verify the required parameter 'ellipsoid' is set
            if (ellipsoid == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'ellipsoid' when calling SurveyCalcApi->SurveycalcBl2stCalcPlGet");
            }

            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "ellipsoid", ellipsoid));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude1", latitude1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude1", longitude1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude2", latitude2));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude2", longitude2));

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcBl2stCalcPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SurveycalcBl2stCalcPlGet200Response>("/surveycalc/bl2st_calc.pl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcBl2stCalcPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 距離と方位角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcBl2stCalcPlGet200Response</returns>
        public async System.Threading.Tasks.Task<SurveycalcBl2stCalcPlGet200Response> SurveycalcBl2stCalcPlGetAsync(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GsiApi.Client.ApiResponse<SurveycalcBl2stCalcPlGet200Response> localVarResponse = await SurveycalcBl2stCalcPlGetWithHttpInfoAsync(outputType, ellipsoid, latitude1, longitude1, latitude2, longitude2, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 距離と方位角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="ellipsoid"></param>
        /// <param name="latitude1"></param>
        /// <param name="longitude1"></param>
        /// <param name="latitude2"></param>
        /// <param name="longitude2"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcBl2stCalcPlGet200Response)</returns>
        public async System.Threading.Tasks.Task<GsiApi.Client.ApiResponse<SurveycalcBl2stCalcPlGet200Response>> SurveycalcBl2stCalcPlGetWithHttpInfoAsync(string outputType, string ellipsoid, double latitude1, double longitude1, double latitude2, double longitude2, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcBl2stCalcPlGet");
            }

            // verify the required parameter 'ellipsoid' is set
            if (ellipsoid == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'ellipsoid' when calling SurveyCalcApi->SurveycalcBl2stCalcPlGet");
            }


            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "ellipsoid", ellipsoid));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude1", latitude1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude1", longitude1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude2", latitude2));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude2", longitude2));

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcBl2stCalcPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SurveycalcBl2stCalcPlGet200Response>("/surveycalc/bl2st_calc.pl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcBl2stCalcPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 平面直角座標への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcBl2xyPlGet200Response</returns>
        public SurveycalcBl2xyPlGet200Response SurveycalcBl2xyPlGet(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0)
        {
            GsiApi.Client.ApiResponse<SurveycalcBl2xyPlGet200Response> localVarResponse = SurveycalcBl2xyPlGetWithHttpInfo(outputType, refFrame, latitude, longitude, zone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 平面直角座標への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcBl2xyPlGet200Response</returns>
        public GsiApi.Client.ApiResponse<SurveycalcBl2xyPlGet200Response> SurveycalcBl2xyPlGetWithHttpInfo(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcBl2xyPlGet");
            }

            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "refFrame", refFrame));
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "zone", zone));
            }
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcBl2xyPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SurveycalcBl2xyPlGet200Response>("/surveycalc/bl2xy.pl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcBl2xyPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 平面直角座標への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcBl2xyPlGet200Response</returns>
        public async System.Threading.Tasks.Task<SurveycalcBl2xyPlGet200Response> SurveycalcBl2xyPlGetAsync(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GsiApi.Client.ApiResponse<SurveycalcBl2xyPlGet200Response> localVarResponse = await SurveycalcBl2xyPlGetWithHttpInfoAsync(outputType, refFrame, latitude, longitude, zone, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 平面直角座標への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcBl2xyPlGet200Response)</returns>
        public async System.Threading.Tasks.Task<GsiApi.Client.ApiResponse<SurveycalcBl2xyPlGet200Response>> SurveycalcBl2xyPlGetWithHttpInfoAsync(string outputType, int refFrame, double latitude, double longitude, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcBl2xyPlGet");
            }


            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "refFrame", refFrame));
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "zone", zone));
            }
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcBl2xyPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SurveycalcBl2xyPlGet200Response>("/surveycalc/bl2xy.pl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcBl2xyPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcTransPlGet200Response</returns>
        public SurveycalcTransPlGet200Response SurveycalcTransPlGet(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0)
        {
            GsiApi.Client.ApiResponse<SurveycalcTransPlGet200Response> localVarResponse = SurveycalcTransPlGetWithHttpInfo(outputType, cnvType, latitude, longitude, altitude, geoidHeight, geocentricX, geocentricY, geocentricZ);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcTransPlGet200Response</returns>
        public GsiApi.Client.ApiResponse<SurveycalcTransPlGet200Response> SurveycalcTransPlGetWithHttpInfo(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0)
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcTransPlGet");
            }

            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "cnv_type", cnvType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            if (altitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "altitude", altitude));
            }
            if (geoidHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geoidHeight", geoidHeight));
            }
            if (geocentricX != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geocentricX", geocentricX));
            }
            if (geocentricY != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geocentricY", geocentricY));
            }
            if (geocentricZ != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geocentricZ", geocentricZ));
            }

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcTransPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SurveycalcTransPlGet200Response>("/surveycalc/trans.pl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcTransPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcTransPlGet200Response</returns>
        public async System.Threading.Tasks.Task<SurveycalcTransPlGet200Response> SurveycalcTransPlGetAsync(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GsiApi.Client.ApiResponse<SurveycalcTransPlGet200Response> localVarResponse = await SurveycalcTransPlGetWithHttpInfoAsync(outputType, cnvType, latitude, longitude, altitude, geoidHeight, geocentricX, geocentricY, geocentricZ, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 緯度・経度と地心直交座標の相互換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="cnvType"></param>
        /// <param name="latitude"></param>
        /// <param name="longitude"></param>
        /// <param name="altitude"> (optional)</param>
        /// <param name="geoidHeight"> (optional)</param>
        /// <param name="geocentricX"> (optional)</param>
        /// <param name="geocentricY"> (optional)</param>
        /// <param name="geocentricZ"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcTransPlGet200Response)</returns>
        public async System.Threading.Tasks.Task<GsiApi.Client.ApiResponse<SurveycalcTransPlGet200Response>> SurveycalcTransPlGetWithHttpInfoAsync(string outputType, int cnvType, double latitude, double longitude, float? altitude = default(float?), float? geoidHeight = default(float?), double? geocentricX = default(double?), double? geocentricY = default(double?), double? geocentricZ = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcTransPlGet");
            }


            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "cnv_type", cnvType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "latitude", latitude));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "longitude", longitude));
            if (altitude != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "altitude", altitude));
            }
            if (geoidHeight != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geoidHeight", geoidHeight));
            }
            if (geocentricX != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geocentricX", geocentricX));
            }
            if (geocentricY != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geocentricY", geocentricY));
            }
            if (geocentricZ != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "geocentricZ", geocentricZ));
            }

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcTransPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SurveycalcTransPlGet200Response>("/surveycalc/trans.pl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcTransPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 緯度・経度への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcXy2blPlGet200Response</returns>
        public SurveycalcXy2blPlGet200Response SurveycalcXy2blPlGet(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0)
        {
            GsiApi.Client.ApiResponse<SurveycalcXy2blPlGet200Response> localVarResponse = SurveycalcXy2blPlGetWithHttpInfo(outputType, refFrame, zone, publicX, publicY);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 緯度・経度への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcXy2blPlGet200Response</returns>
        public GsiApi.Client.ApiResponse<SurveycalcXy2blPlGet200Response> SurveycalcXy2blPlGetWithHttpInfo(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0)
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcXy2blPlGet");
            }

            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "refFrame", refFrame));
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "zone", zone));
            }
            if (publicX != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicX", publicX));
            }
            if (publicY != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicY", publicY));
            }

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcXy2blPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SurveycalcXy2blPlGet200Response>("/surveycalc/xy2bl.pl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcXy2blPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 緯度・経度への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcXy2blPlGet200Response</returns>
        public async System.Threading.Tasks.Task<SurveycalcXy2blPlGet200Response> SurveycalcXy2blPlGetAsync(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GsiApi.Client.ApiResponse<SurveycalcXy2blPlGet200Response> localVarResponse = await SurveycalcXy2blPlGetWithHttpInfoAsync(outputType, refFrame, zone, publicX, publicY, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 緯度・経度への換算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="publicX"> (optional)</param>
        /// <param name="publicY"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcXy2blPlGet200Response)</returns>
        public async System.Threading.Tasks.Task<GsiApi.Client.ApiResponse<SurveycalcXy2blPlGet200Response>> SurveycalcXy2blPlGetWithHttpInfoAsync(string outputType, int refFrame, int? zone = default(int?), double? publicX = default(double?), double? publicY = default(double?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcXy2blPlGet");
            }


            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "refFrame", refFrame));
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "zone", zone));
            }
            if (publicX != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicX", publicX));
            }
            if (publicY != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicY", publicY));
            }

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcXy2blPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SurveycalcXy2blPlGet200Response>("/surveycalc/xy2bl.pl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcXy2blPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 距離と方向角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SurveycalcXy2stPlGet200Response</returns>
        public SurveycalcXy2stPlGet200Response SurveycalcXy2stPlGet(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0)
        {
            GsiApi.Client.ApiResponse<SurveycalcXy2stPlGet200Response> localVarResponse = SurveycalcXy2stPlGetWithHttpInfo(outputType, refFrame, publicX1, publicY1, publicX2, publicY2, zone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 距離と方向角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SurveycalcXy2stPlGet200Response</returns>
        public GsiApi.Client.ApiResponse<SurveycalcXy2stPlGet200Response> SurveycalcXy2stPlGetWithHttpInfo(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcXy2stPlGet");
            }

            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "refFrame", refFrame));
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "zone", zone));
            }
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicX1", publicX1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicY1", publicY1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicX2", publicX2));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicY2", publicY2));

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcXy2stPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<SurveycalcXy2stPlGet200Response>("/surveycalc/xy2st.pl", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcXy2stPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 距離と方向角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SurveycalcXy2stPlGet200Response</returns>
        public async System.Threading.Tasks.Task<SurveycalcXy2stPlGet200Response> SurveycalcXy2stPlGetAsync(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GsiApi.Client.ApiResponse<SurveycalcXy2stPlGet200Response> localVarResponse = await SurveycalcXy2stPlGetWithHttpInfoAsync(outputType, refFrame, publicX1, publicY1, publicX2, publicY2, zone, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 距離と方向角の計算 
        /// </summary>
        /// <exception cref="GsiApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="outputType"></param>
        /// <param name="refFrame"></param>
        /// <param name="publicX1"></param>
        /// <param name="publicY1"></param>
        /// <param name="publicX2"></param>
        /// <param name="publicY2"></param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SurveycalcXy2stPlGet200Response)</returns>
        public async System.Threading.Tasks.Task<GsiApi.Client.ApiResponse<SurveycalcXy2stPlGet200Response>> SurveycalcXy2stPlGetWithHttpInfoAsync(string outputType, int refFrame, double publicX1, double publicY1, double publicX2, double publicY2, int? zone = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'outputType' is set
            if (outputType == null)
            {
                throw new GsiApi.Client.ApiException(400, "Missing required parameter 'outputType' when calling SurveyCalcApi->SurveycalcXy2stPlGet");
            }


            GsiApi.Client.RequestOptions localVarRequestOptions = new GsiApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/xml"
            };

            var localVarContentType = GsiApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "outputType", outputType));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "refFrame", refFrame));
            if (zone != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "zone", zone));
            }
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicX1", publicX1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicY1", publicY1));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicX2", publicX2));
            localVarRequestOptions.QueryParameters.Add(GsiApi.Client.ClientUtils.ParameterToMultiMap("", "publicY2", publicY2));

            localVarRequestOptions.Operation = "SurveyCalcApi.SurveycalcXy2stPlGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SurveycalcXy2stPlGet200Response>("/surveycalc/xy2st.pl", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SurveycalcXy2stPlGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
