/*
 * 国土地理院標高API
 *
 * 指定した緯度経度の位置の標高値を取得するAPIです。 2013年3月14日より試験公開されています。  ## リクエストレート制限 サーバに過度の負担を与えないでください。過度の負担を与えると判断したアクセスについて、 国土地理院は予告なく遮断を行う場合があります。具体的な制限値は公開されていませんが、 アプリケーションの設計時には適切なレート制限を実装することを強く推奨します。 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using GsiElevationApi.Client;
using GsiElevationApi.Model;

namespace GsiElevationApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IElevationApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 標高値を取得
        /// </summary>
        /// <remarks>
        /// 指定した緯度経度の位置の標高値を取得します。
        /// </remarks>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetelevationPhpGet200Response</returns>
        GetelevationPhpGet200Response GetelevationPhpGet(double lon, double lat, string outtype = default(string), int operationIndex = 0);

        /// <summary>
        /// 標高値を取得
        /// </summary>
        /// <remarks>
        /// 指定した緯度経度の位置の標高値を取得します。
        /// </remarks>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetelevationPhpGet200Response</returns>
        ApiResponse<GetelevationPhpGet200Response> GetelevationPhpGetWithHttpInfo(double lon, double lat, string outtype = default(string), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IElevationApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 標高値を取得
        /// </summary>
        /// <remarks>
        /// 指定した緯度経度の位置の標高値を取得します。
        /// </remarks>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetelevationPhpGet200Response</returns>
        System.Threading.Tasks.Task<GetelevationPhpGet200Response> GetelevationPhpGetAsync(double lon, double lat, string outtype = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 標高値を取得
        /// </summary>
        /// <remarks>
        /// 指定した緯度経度の位置の標高値を取得します。
        /// </remarks>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetelevationPhpGet200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetelevationPhpGet200Response>> GetelevationPhpGetWithHttpInfoAsync(double lon, double lat, string outtype = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IElevationApi : IElevationApiSync, IElevationApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ElevationApi : IElevationApi
    {
        private GsiElevationApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ElevationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ElevationApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ElevationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ElevationApi(string basePath)
        {
            this.Configuration = GsiElevationApi.Client.Configuration.MergeConfigurations(
                GsiElevationApi.Client.GlobalConfiguration.Instance,
                new GsiElevationApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new GsiElevationApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GsiElevationApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = GsiElevationApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ElevationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ElevationApi(GsiElevationApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = GsiElevationApi.Client.Configuration.MergeConfigurations(
                GsiElevationApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new GsiElevationApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new GsiElevationApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = GsiElevationApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ElevationApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ElevationApi(GsiElevationApi.Client.ISynchronousClient client, GsiElevationApi.Client.IAsynchronousClient asyncClient, GsiElevationApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = GsiElevationApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public GsiElevationApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public GsiElevationApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public GsiElevationApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public GsiElevationApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 標高値を取得 指定した緯度経度の位置の標高値を取得します。
        /// </summary>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetelevationPhpGet200Response</returns>
        public GetelevationPhpGet200Response GetelevationPhpGet(double lon, double lat, string outtype = default(string), int operationIndex = 0)
        {
            GsiElevationApi.Client.ApiResponse<GetelevationPhpGet200Response> localVarResponse = GetelevationPhpGetWithHttpInfo(lon, lat, outtype);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 標高値を取得 指定した緯度経度の位置の標高値を取得します。
        /// </summary>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetelevationPhpGet200Response</returns>
        public GsiElevationApi.Client.ApiResponse<GetelevationPhpGet200Response> GetelevationPhpGetWithHttpInfo(double lon, double lat, string outtype = default(string), int operationIndex = 0)
        {
            GsiElevationApi.Client.RequestOptions localVarRequestOptions = new GsiElevationApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/javascript"
            };

            var localVarContentType = GsiElevationApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiElevationApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiElevationApi.Client.ClientUtils.ParameterToMultiMap("", "lon", lon));
            localVarRequestOptions.QueryParameters.Add(GsiElevationApi.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            if (outtype != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiElevationApi.Client.ClientUtils.ParameterToMultiMap("", "outtype", outtype));
            }

            localVarRequestOptions.Operation = "ElevationApi.GetelevationPhpGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<GetelevationPhpGet200Response>("/getelevation.php", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetelevationPhpGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// 標高値を取得 指定した緯度経度の位置の標高値を取得します。
        /// </summary>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetelevationPhpGet200Response</returns>
        public async System.Threading.Tasks.Task<GetelevationPhpGet200Response> GetelevationPhpGetAsync(double lon, double lat, string outtype = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            GsiElevationApi.Client.ApiResponse<GetelevationPhpGet200Response> localVarResponse = await GetelevationPhpGetWithHttpInfoAsync(lon, lat, outtype, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 標高値を取得 指定した緯度経度の位置の標高値を取得します。
        /// </summary>
        /// <exception cref="GsiElevationApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lon">経度（度の10進法）</param>
        /// <param name="lat">緯度（度の10進法）</param>
        /// <param name="outtype">アウトプットの形式 (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetelevationPhpGet200Response)</returns>
        public async System.Threading.Tasks.Task<GsiElevationApi.Client.ApiResponse<GetelevationPhpGet200Response>> GetelevationPhpGetWithHttpInfoAsync(double lon, double lat, string outtype = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            GsiElevationApi.Client.RequestOptions localVarRequestOptions = new GsiElevationApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/javascript"
            };

            var localVarContentType = GsiElevationApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = GsiElevationApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(GsiElevationApi.Client.ClientUtils.ParameterToMultiMap("", "lon", lon));
            localVarRequestOptions.QueryParameters.Add(GsiElevationApi.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            if (outtype != null)
            {
                localVarRequestOptions.QueryParameters.Add(GsiElevationApi.Client.ClientUtils.ParameterToMultiMap("", "outtype", outtype));
            }

            localVarRequestOptions.Operation = "ElevationApi.GetelevationPhpGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetelevationPhpGet200Response>("/getelevation.php", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetelevationPhpGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
